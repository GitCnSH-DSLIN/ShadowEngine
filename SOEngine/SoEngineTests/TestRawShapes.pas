unit TestRawShapes;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Math, uRawShapes, uGeometryClasses, uSoTypes,
  System.Generics.Collections;

type
  // Test methods for class TRawShape

  TestTRawShape = class(TTestCase)
  strict private
    FRawShape: TRawShape;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCorrectClone;
    procedure TestIncorrectClone;
    procedure TestGetData;
  end;

  // Test methods for class TRawCircle

  TestTRawCircle = class(TTestCase)
  strict private
    FRawCircle: TRawCircle;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFigureType;
  end;

  // Test methods for class TRawPoly

  TestTRawPoly = class(TTestCase)
  strict private
    FRawPoly: TRawPoly;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCount;
    procedure TestFigureType;
  end;

implementation

procedure TestTRawShape.SetUp;
begin
  FRawShape := TRawCircle.Create(50, 50, 100); //TRawShape.Create;
end;

procedure TestTRawShape.TearDown;
begin
  FRawShape.Free;
  FRawShape := nil;
end;

procedure TestTRawShape.TestCorrectClone;
var
  vIsRawFiguresIdentical: Boolean;
  vArr: TArray<TPointF>;
  vSample: TRawShape;
  i: Integer;
begin
  vSample := TRawCircle.Create(50, 50, 100);

  vIsRawFiguresIdentical := True;
  vArr := FRawShape.GetData;
  for i := 0 to High(vArr) do
    vIsRawFiguresIdentical := vIsRawFiguresIdentical and (vArr[i] = vSample.GetData[i]);

  vIsRawFiguresIdentical := vIsRawFiguresIdentical and (vSample.FigureType = FRawShape.FigureType);

  Check(vIsRawFiguresIdentical, 'Clone in TRawShape works incorrect');
end;

procedure TestTRawShape.TestGetData;
var
  ReturnValue: TArray<TPointF>;
  vData: TArray<TPointF>;
  vRes: Boolean;
  i: Integer;
begin
  ReturnValue := FRawShape.GetData;

  SetLength(vData, 2);
  vData[0] := TPointF.Create(50, 50);
  vData[1] := TPointF.Create(100, 0);
  vRes := True;

  for i := 0 to High(ReturnValue) do
    vRes := vRes and (vData[i] = ReturnValue[i]);

  Check(vRes, 'Data after Creation differs');
end;

procedure TestTRawShape.TestIncorrectClone;
var
  vIsRawFiguresIdentical: Boolean;
  vArr, vSampleArr: TArray<TPointF>;
  vSample: TRawShape;
  i: Integer;
begin
  SetLength(vSampleArr, 2);
  vSampleArr[0] := TPointF.Create(50, 50);
  vSampleArr[1] := TPointF.Create(100, 0);
  vSample := TRawPoly.Create(vSampleArr);

  vIsRawFiguresIdentical := True;
  vArr := FRawShape.GetData;
  for i := 0 to High(vArr) do
    vIsRawFiguresIdentical := vIsRawFiguresIdentical and (vArr[i] = vSample.GetData[i]);

  vIsRawFiguresIdentical := vIsRawFiguresIdentical and (vSample.FigureType = FRawShape.FigureType);

  Check(not vIsRawFiguresIdentical, 'Clone in TRawShape works incorrect. Error in FigureType');
end;

procedure TestTRawCircle.SetUp;
begin
  FRawCircle := TRawCircle.Create(-100, 100, 50);
end;

procedure TestTRawCircle.TearDown;
begin
  FRawCircle.Free;
  FRawCircle := nil;
end;

procedure TestTRawCircle.TestFigureType;
var
  ReturnValue: TFigureType;
begin
  ReturnValue := FRawCircle.FigureType;
  Check(ReturnValue = ftCircle, 'Error in FigureType in TRawCircle');
end;

procedure TestTRawPoly.SetUp;
var
  vArr: TArray<TPointF>;
begin
  SetLength(vArr, 4);
  vArr[0] := TPointF.Create(-40, -40);
  vArr[1] := TPointF.Create(60, -40);
  vArr[2] := TPointF.Create(40, 60);
  vArr[3] := TPointF.Create(-60, 40);
  FRawPoly := TRawPoly.Create(vArr);
end;

procedure TestTRawPoly.TearDown;
begin
  FRawPoly.Free;
  FRawPoly := nil;
end;

procedure TestTRawPoly.TestCount;
var
  ReturnValue: Integer;
begin
  ReturnValue := FRawPoly.Count;
  Check(ReturnValue = 4, 'Error in GetPointCount in TRawPoly');
end;

procedure TestTRawPoly.TestFigureType;
var
  ReturnValue: TFigureType;
begin
  ReturnValue := FRawPoly.FigureType;
  Check(ReturnValue = ftPoly, 'Error in FigureType in TRawPoly');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRawShape.Suite);
  RegisterTest(TestTRawCircle.Suite);
  RegisterTest(TestTRawPoly.Suite);
end.

